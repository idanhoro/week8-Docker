name: Docker-pipeline....

trigger:
- master
- feature/*

pool:
  name: agent1  

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: Build
    steps:
    - task: CmdLine@2
      displayName: Install docker and set permissions
      inputs:
        script: 'curl -fsSL https://get.docker.com -o get-docker.sh && chmod u+x get-docker.sh && ./get-docker.sh && sudo chmod 666 /var/run/docker.sock && sudo chown ubuntu:docker /var/run/docker.sock'

    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: 'Testc-container'
        repository: 'containertest'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            inputs:
              script: 'curl -fsSL https://get.docker.com -o get-docker.sh && chmod u+x get-docker.sh && ./get-docker.sh && sudo chmod 666 /var/run/docker.sock && sudo chown ubuntu:docker /var/run/docker.sock'
          - task: CmdLine@2
            displayName: Remove current container if exist
            inputs:
              script: 'docker rm -f  bootcamp || true'
          - task: Docker@2
            displayName: Loing to the container resource
            inputs:
              containerRegistry: 'Testc-container'
              command: 'login'
          - task: CmdLine@2
            displayName: Pull the last image build
            inputs:
              script: 'docker pull containeridanho55.azurecr.io/containertest:$(Build.BuildId)'
          - task: Bash@3
            displayName: Run the docker container
            inputs:
              targetType: 'inline'
              script: 'docker run --restart=always -d --name bootcamp -p $(PORT):$(PORT) -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=$(PGDATABASE) -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=$(PGPORT) -e PORT=$(PORT) -e HOST=$(HOST) -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=$(NODE_ENV) -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) containeridanho55.azurecr.io/containertest:$(Build.BuildId)'
          
          
# Continuous Delivery Process for Production Environment
- stage: DeployToProduction
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
   - deployment: production
     displayName: Deploy to Production
     environment:
       name: production
       resourceType: VirtualMachine
     strategy:
       runOnce:
         deploy:
           steps:
           - task: CmdLine@2
             inputs:
              script: 'curl -fsSL https://get.docker.com -o get-docker.sh && chmod u+x get-docker.sh && ./get-docker.sh && sudo chmod 666 /var/run/docker.sock && sudo chown ubuntu:docker /var/run/docker.sock'
           - task: CmdLine@2
             displayName: Remove current container if exist
             inputs:
              script: 'docker rm -f  bootcamp || true'
           - task: Docker@2
             displayName: Loing to the container resource
             inputs:
              containerRegistry: 'Testc-container'
              command: 'login'
           - task: CmdLine@2
             displayName: Pull the last image build
             inputs:
              script: 'docker pull containeridanho55.azurecr.io/containertest:$(Build.BuildId)'
           - task: Bash@3
             displayName: Run the docker container
             inputs:
              targetType: 'inline'
              script: 'docker run --restart=always -d --name bootcamp -p $(PORT):$(PORT) -e PGHOST=$(PGHOST_PROD) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=$(PGDATABASE) -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=$(PGPORT) -e PORT=$(PORT) -e HOST=$(HOST) -e HOST_URL=$(HOST_URL_PROD) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=$(NODE_ENV) -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) containeridanho55.azurecr.io/containertest:$(Build.BuildId)'
          